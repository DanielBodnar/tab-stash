.icon {
  display: inline-block;
  box-sizing: border-box;
  width: var(--icon-size);
  height: var(--icon-size);

  background-size: var(--icon-size) var(--icon-size);
  background-position: center;
  background-repeat: no-repeat;
  background-color: transparent;
  border: none;

  & > img {
    width: var(--icon-size);
    height: var(--icon-size);
    object-fit: fill;
  }
}

// Function to define the set of icons used in each theme.  Must be called from
// the theme-* files for themes which have their own icons.
.icon-vars(@theme, @inverse) {
  .icon(@id) {
    --icon-@{id}: url("icons/@{theme}/@{id}.svg");
    --icon-@{id}-inverse: url("icons/@{inverse}/@{id}.svg");
  }
  & {
    .icon(back);
    .icon(cancel);
    .icon(collapse-closed);
    .icon(collapse-open);
    .icon(delete-opened);
    .icon(delete-stashed);
    .icon(delete);
    .icon(folder);
    .icon(folder-selected);
    .icon(item-menu);
    .icon(mainmenu);
    .icon(move-menu);
    .icon(new-empty-group);
    .icon(rename);
    .icon(restore-del);
    .icon(restore);
    .icon(stash-one);
    .icon(stash);
    .icon(stashed);
    .icon(tab);
    .icon(tab-selected);
    .icon(warning);
  }
}

// Define CSS for particular icons.
.def-icon(@id) {
  .icon-@{id} {
    background-image: var(e("--icon-@{id}"));
  }
}

// Vanilla icons (separate from actions, which are handled in action.less)
.def-icon(delete);
.def-icon(delete-stashed);
.def-icon(folder);
.def-icon(folder-selected);
.def-icon(folder-selected-inverse);
.def-icon(item-menu);
.def-icon(move-menu-inverse);
.def-icon(new-empty-group);
.def-icon(restore-del);
.def-icon(restore);
.def-icon(stashed);
.def-icon(tab-selected-inverse);
.def-icon(tab-selected);
.def-icon(tab);
.def-icon(warning);
